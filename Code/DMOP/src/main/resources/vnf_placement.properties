#Parametros de Sistema
problem.package = Problems/
network.package = Network/NFS/
file.name.links = Links.txt
file.name.nodes = Nodes.txt
file.name.servers = Servers.txt

file.name.vnfs.sfc = VNF/VnfsSFC.txt
file.name.vnfs.share = VNF/VnfsShare.txt
file.name.traffics = traffics.txt
file.name.solution = Solution/solutions.csv

traffics.folder = Traffic/
solutions.folder = Solutions/

#Baja: media: alta:
number.traffic = 20

#Cantidad de caminos mas cortos
k.shortest = 3

#Costo en dolares por CPU (Para la fragementacion)
server.penalty.cpu.cost = 0.001

#Costo en dolares por RAM (Para la fragementacion)
server.penalty.ram.cost = 0.002

#Costo en dolares por almacenamiento (Para la fragementacion)
server.penalty.storage.cost = 0.004

#Costo en dolares por ancho de banda (Para la fragmentacion)
link.penalty.bandwidth.cost = 0.003

#Trafico
#Ancho de banda minimo y maximo para el trafico  !!! cite 470
traffic.bandwidth.min = 2
traffic.bandwidth.max = 5

#Porcentaje sobre el delay minimo de origen a destino del trafico
traffic.percentage.delay.max = 150

#Costo en dolares por falta de SLA minimo y maximo
traffic.penalty.slo.min = 2
traffic.penalty.slo.max = 3

#Cantidad de VNFs por trafico
traffic.sfc.min = 1
traffic.sfc.max = 3



#Vnf Random
#Tomar 100 (Solo en VnfServiceRandom)
number.solution = 100

#Numero de reintentos para encontrar una solucion factible (Solo en VnfServiceRandom)
retries.solution = 20

#true si los traficos se generan aleatoriamente y false si los traficos son all to all (Solo en VnfServiceRandom)
traffics.random = false

#false para generar traficos nuevos y true si se lee el archivo de traficos (Solo en VnfServiceRandom)
traffics.read.file = false

python.interpreter.path = C:\\virtualEnv\\python36\\Scripts\\python3.6.exe
python.script.filepath = C:\\virtualEnv\\python36\\Datorama\\MCDM\\dmop.py
python.script.logfile = target/mcdm.log

# dynamic problem params

# every two iterations of the algorithm
change.frequency = 50
change.severity = 1d







